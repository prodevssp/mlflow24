{"version":3,"file":"rtl.js","sources":["../../src/test-utils/rtl/selectEvent.ts","../../src/test-utils/rtl/table.ts","../../src/test-utils/rtl/index.ts"],"sourcesContent":["import { waitFor, within } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\n\nimport { selectClasses } from '../common';\n\n/**\n * Allows the helpers in this module to be used when the select element is\n * queried _semantically_ (as if it were a native <select> element) — i.e.\n * `ByRole('combobox', { name: '…' })`, rather than by test ID.\n *\n * Also checks if <DesignSystemProvider> was used, because many of the helpers\n * in this module query by class name starting with \"du-bois-\", which requires\n * the provider.\n */\nfunction getRootElement(element: HTMLElement): HTMLElement {\n  if (element.getAttribute('role') === 'combobox') {\n    element = element.closest(`.${selectClasses.selector}`)!.parentElement!;\n  }\n  if (element.classList.contains('ant-select')) {\n    throw new Error('Component must be wrapped by <DesignSystemProvider>');\n  }\n  return element;\n}\n\nfunction getOptionsList(select: HTMLElement): HTMLElement {\n  const body = select.ownerDocument.body;\n  const input = within(select).getByRole('combobox');\n  const listId = input.getAttribute('aria-owns') || input.getAttribute('aria-controls');\n  if (!listId) {\n    throw new Error(`Options listid not found\\n${body.innerHTML}`);\n  }\n\n  const listbox = select.ownerDocument.getElementById(listId);\n  if (!listbox?.parentElement) {\n    throw new Error(`Options list not found\\n${body.innerHTML}`);\n  }\n\n  const optionsList = listbox.parentElement.querySelector<HTMLElement>(`.${selectClasses.list}`);\n  if (!optionsList) {\n    throw new Error(`Options list not found\\n${body.innerHTML}`);\n  }\n\n  return optionsList;\n}\n\n/**\n * Opens the dropdown menu for the <Select/> by clicking. Will throw an error if\n * the menu is already opened or if the menu is unable to be opened.\n */\nexport async function openMenu(select: HTMLElement): Promise<void> {\n  select = getRootElement(select);\n  if (select.classList.contains(selectClasses.open)) {\n    throw new Error(`Select is already open\\n${select.innerHTML}`);\n  }\n  const selector = select.querySelector(`.${selectClasses.selector}`);\n  if (!selector) {\n    throw new Error(`Selector not found\\n${select.innerHTML}`);\n  }\n  await userEvent.click(selector, { pointerEventsCheck: 0 });\n  await waitFor(() => {\n    if (!select.classList.contains(selectClasses.open)) {\n      throw new Error(`Select did not open\\n${select.innerHTML}`);\n    }\n  });\n}\n\n/**\n * Closes the dropdown menu for the <Select/> by clicking. Will throw an error if\n * the menu is already closed or if the menu is unable to be closed.\n */\nexport async function closeMenu(select: HTMLElement): Promise<void> {\n  select = getRootElement(select);\n  if (!select.classList.contains(selectClasses.open)) {\n    throw new Error(`Select is already closed\\n${select.innerHTML}`);\n  }\n  const selector = select.querySelector(`.${selectClasses.selector}`);\n  if (!selector) {\n    throw new Error(`Selector not found\\n${select.innerHTML}`);\n  }\n  await userEvent.click(selector, { pointerEventsCheck: 0 });\n  await waitFor(() => {\n    if (select.classList.contains(selectClasses.open)) {\n      throw new Error(`Select did not close\\n${select.innerHTML}`);\n    }\n  });\n}\n\n/**\n * Returns a string concatenating the labels for all selected options.\n */\nexport function getLabelText(select: HTMLElement): string {\n  select = getRootElement(select);\n  const selector = select.querySelector(`.${selectClasses.selector}`);\n  if (!selector) {\n    throw new Error(`Selector not found\\n${select.innerHTML}`);\n  }\n  // Trim the text to avoid weird whitespace issues non-label elements being added.\n  // For example, the input mirror is an empty span with some whitespace that is\n  // nested under the selector but does not show up in the label text.\n  return selector.textContent?.trim() ?? '';\n}\n\n/**\n * Selects options from the dropdown menu for a <Select/> component with `mode=\"multiple\"`.\n * The provided strings must match the option labels exactly. There is a known\n * limitation for lists that are extremely long because AntD virtualizes the\n * options so not all may options may be rendered in the DOM. If this is causing\n * you issues, please let #help-frontend know.\n */\nexport async function multiSelect(select: HTMLElement, options: string[]): Promise<void> {\n  select = getRootElement(select);\n  await openMenu(select);\n  const optionsList = getOptionsList(select);\n  for (let i = 0; i < options.length; i++) {\n    const option = options[i];\n    const optionItem = within(optionsList).getByTitle(option);\n    await userEvent.click(optionItem, { pointerEventsCheck: 0 });\n  }\n  // Close the menu to indicate that selection has finished\n  await closeMenu(select);\n}\n\n/**\n * Selects options from the dropdown menu for a <Select/> component without a\n * mode. The provided string must match an option label exactly. There is a known\n * limitation for lists that are extremely long because AntD virtualizes the\n * options so not all may options may be rendered in the DOM. If this is causing\n * you issues, please let #help-frontend know.\n */\nexport async function singleSelect(select: HTMLElement, option: string): Promise<void> {\n  select = getRootElement(select);\n  await openMenu(select);\n  const optionsList = getOptionsList(select);\n  const optionItem = within(optionsList).getByTitle(option);\n  await userEvent.click(optionItem, { pointerEventsCheck: 0 });\n  // Menu automatically closes for a single <Select/> (no mode=\"multiple\")\n}\n\n/**\n * Clicks on the \"Clear\" button. In order for this function to work properly,\n * the `allowClear` prop must be set to `true`.\n */\nexport async function clearAll(select: HTMLElement): Promise<void> {\n  select = getRootElement(select);\n  const clearBtn = select.querySelector(`.${selectClasses.clear}`);\n  if (!clearBtn) {\n    throw new Error(`Select not clearable\\n${select.innerHTML}`);\n  }\n  await userEvent.click(clearBtn);\n}\n\n/**\n * Opens the dropdown menu, finds all of the options in the dropdown, closes\n * the menu, and returns a list of the text of each option in order.\n */\nexport async function getAllOptions(select: HTMLElement): Promise<string[]> {\n  select = getRootElement(select);\n  await openMenu(select);\n  const optionsList = getOptionsList(select);\n  const options: string[] = [];\n  optionsList.querySelectorAll(`.${selectClasses.option}`).forEach((option) => {\n    if (option.textContent === null) {\n      throw new Error(`Option had no text content\\n${option.innerHTML}`);\n    }\n    options.push(option.textContent);\n  });\n  await closeMenu(select);\n  return options;\n}\n","import { queryHelpers, within } from '@testing-library/react';\n\nimport type { GetTableRowByCellTextOptions, TableRows } from '../common';\nimport { createMarkdownTable } from '../common';\n\n/**\n * Returns the table row that contains the specified `cellText`. The `cellText`\n * must be in the column with name `columnHeaderName` if it is specified. Otherwise,\n * the `cellText` must be in the first column. Throws an error if either multiple\n * rows or no rows can be found that match the given options. Also throws an error\n * if the column with name `columnHeaderName` cannot be found.\n *\n * @param tableElement The HTMLElement representing the table to query in. This is likely\n * a `<div role=\"table\">` element, so it can be queried by `screen.getByRole('table')`.\n * @param cellText The cell text that uniquely identifies the row.\n * @param columnHeaderName The name of the column to search the text for. If not provided,\n * the first column will be used.\n */\nexport function getTableRowByCellText(\n  tableElement: HTMLElement,\n  cellText: string,\n  { columnHeaderName }: GetTableRowByCellTextOptions = {},\n): HTMLElement {\n  let columnHeaderIndex: number;\n  if (columnHeaderName === undefined) {\n    columnHeaderIndex = 0;\n  } else {\n    const columnHeader = within(tableElement).getByRole('columnheader', { name: columnHeaderName });\n    columnHeaderIndex = Array.from(columnHeader.parentElement?.children ?? []).indexOf(columnHeader);\n  }\n\n  const matchingRows = within(tableElement)\n    .getAllByRole('row')\n    // Skip first row (table header)\n    .slice(1)\n    .filter((row) => {\n      const cells = within(row).getAllByRole('cell');\n      const cell = cells[columnHeaderIndex];\n      const cellContainsText = within(cell).queryByText(cellText) !== null;\n      return cellContainsText;\n    });\n\n  if (matchingRows.length === 0) {\n    throw queryHelpers.getElementError(\n      `Unable to find a table row with text \"${cellText}\" in the column \"${columnHeaderName}\"`,\n      tableElement,\n    );\n  }\n\n  if (matchingRows.length > 1) {\n    throw queryHelpers.getElementError(\n      `Found multiple table rows with text \"${cellText}\" in the column \"${columnHeaderName}\"`,\n      tableElement,\n    );\n  }\n\n  return matchingRows[0];\n}\n\n/**\n * Converts a Du Bois table to a markdown table string. This means that each cell\n * is separated by a pipe (including the edges), the header row is on its own line\n * at the top, each data row is on its own line below, and the header row is separated\n * by a row of dashes from the data rows. This is useful for checking table contents\n * in tests.\n *\n * @param tableElement The HTMLElement representing the table to query in. This is likely\n * a `<div role=\"table\">` element, so it can be queried by `screen.getByRole('table')`.\n *\n * @example\n * The HTML table:\n * ```jsx\n *   <Table>\n *     <TableRow isHeader>\n *       <TableHeader>Name</TableHeader>\n *       <TableHeader>Fruit</TableHeader>\n *     </TableRow>\n *     <TableRow>\n *       <TableCell>Alice</TableCell>\n *       <TableCell>Apple</TableCell>\n *     </TableRow>\n *     <TableRow>\n *       <TableCell>Brady</TableCell>\n *       <TableCell>Banana</TableCell>\n *     </TableRow>\n *   </Table>\n * ```\n *\n * The Markdown table:\n * ```md\n *   | Name | Fruit |\n *   | --- | --- |\n *   | Alice | Apple |\n *   | Brady | Banana |\n * ```\n */\nexport function toMarkdownTable(tableElement: HTMLElement): string {\n  const { bodyRows, headerRow } = getTableRows(tableElement);\n  const columns = within(headerRow)\n    .getAllByRole('columnheader')\n    .map((column) => column.textContent ?? '');\n  const rows = bodyRows.map((row) =>\n    within(row)\n      .getAllByRole('cell')\n      .map((cell) => cell.textContent ?? ''),\n  );\n  return createMarkdownTable(columns, rows);\n}\n\n/**\n * Returns the header row and all body rows (non-header rows) in order. Assumes that the\n * `tableElement` has a single header row (as the first row) and the rest of the rows are\n * body rows.\n *\n * @param tableElement The HTMLElement representing the table to query in. This is likely\n * a `<div role=\"table\">` element, so it can be queried by `screen.getByRole('table')`.\n */\nexport function getTableRows(tableElement: HTMLElement): TableRows<HTMLElement> {\n  const [firstRow, ...restRows] = within(tableElement).getAllByRole('row');\n  return {\n    bodyRows: restRows,\n    headerRow: firstRow,\n  };\n}\n","import userEvent from '@testing-library/user-event';\n\nexport * as selectEvent from './selectEvent';\n\nexport * from './table';\n\n/**\n * Opens the dropdown menu by clicking on the dropdown button.\n *\n * @param dropdownButton - The Dropdown Trigger button that opens the menu when clicked.\n */\nexport const openDropdownMenu = async (dropdownButton: HTMLElement) => {\n  await userEvent.type(dropdownButton, '{arrowdown}');\n};\n"],"names":["getRootElement","element","getAttribute","closest","selectClasses","selector","parentElement","classList","contains","Error","getOptionsList","select","body","ownerDocument","input","within","getByRole","listId","innerHTML","listbox","getElementById","optionsList","querySelector","list","openMenu","open","userEvent","click","pointerEventsCheck","waitFor","closeMenu","getLabelText","_selector$textContent","_selector$textContent2","textContent","trim","multiSelect","options","i","length","option","optionItem","getByTitle","singleSelect","clearAll","clearBtn","clear","getAllOptions","querySelectorAll","forEach","push","getTableRowByCellText","tableElement","cellText","columnHeaderName","arguments","undefined","columnHeaderIndex","_columnHeader$parentE","_columnHeader$parentE2","columnHeader","name","Array","from","children","indexOf","matchingRows","getAllByRole","slice","filter","row","cells","cell","cellContainsText","queryByText","queryHelpers","getElementError","toMarkdownTable","bodyRows","headerRow","getTableRows","columns","map","column","_column$textContent","rows","_cell$textContent","createMarkdownTable","firstRow","restRows","openDropdownMenu","dropdownButton","type"],"mappings":"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"}